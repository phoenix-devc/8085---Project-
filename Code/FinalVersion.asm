		.ORG 0000H
;-REDUNDANCY-;		
		LXI SP,0FFFFH
		CALL BLINKSOD
		CALL BLINKSOD
		MVI A,80H
		OUT 03H
		OUT 03H
		MVI A,88H
		OUT 83H
		OUT 83H
		CALL LCDINIT
		CALL INIT_RAM
		LXI H,STRING17
		CALL LCDSTRINGDISP
		LXI H,STRING18
		CALL LCDL2
		CALL BLINKSODX3
		LXI H,STRING19
		CALL LCDSTRINGDISP
		LXI H,STRING20
		CALL LCDL2
		CALL BLINKSOD
		CALL BLINKSOD
;-REDUNDANCY-;
MAINCODE:	LXI SP,0FFFFH
		CALL BLINKSOD
		CALL BLINKSOD
		MVI A,80H
		OUT 03H
		OUT 03H
		MVI A,88H
		OUT 83H
		OUT 83H
		CALL LCDINIT
		CALL INIT_RAM
		LXI H,STRING1
		CALL LCDSTRINGDISP
		CALL BLINKSODX5
		;PLAYER VS PLAYER JUMPING:---------------			
		LXI H,STRING11
		CALL LCDSTRINGDISP
		LXI H,STRING8
		CALL LCDL2
PLOOP1:		CALL KEYIN
		CPI 0AH
		JZ AIGAME	
		CPI 0BH
		JZ PLAYERGAME	
		JMP PLOOP1
		;---------------------------------------
AIGAME:		LXI H,STRING9
		CALL LCDSTRINGDISP
		LXI H,STRING10	; Play as green / red displayed @ this point
		CALL LCDL2
		;LXI H,BOARD   ;CWIN LOADS BOARD AUTOMATICALLY /H-L MODIFIED NO STACKING FOR H/
		CALL UPDATE2
		MVI B,09H
		
		
COLOURMENULOOP:	LXI H,COLOURFLAG
		CALL KEYIN
		;COLOURFLAG 00H -> NORMAL @A
		;COLOURFLAG 01H -> INVERT GRID @B
		CPI 0AH
		JNZ CSKIP1		
		MVI M,00H
		JMP CSKIP2
CSKIP1:		CPI 0BH
		JNZ COLOURMENULOOP
		MVI M,01H		
CSKIP2:		LXI H,STRING5
		CALL LCDSTRINGDISP
		LXI H,STRING8
		CALL LCDL2
		LXI H,BOARD   ;CWIN LOADS BOARD AUTOMATICALLY /H-L MODIFIED NO STACKING FOR H/	
MENULOOP:	CALL KEYIN
		CPI 0BH
		JZ PLAY1
		CPI 0AH
		JZ PLAY2
		JNZ MENULOOP	
PLAY1:		DCR B
		MVI M,01H	;PLACE X AT TOPLEFT CORNER
PLAY2:		CALL UPDATE2
		CALL CWIN
		CPI 01H	
		JZ DUMMYPLAYERWIN
		CPI 0FEH
		JZ DUMMYAIWIN
INVP:		LXI H,STRING3
		CALL LCDSTRINGDISP
		CALL PLAYERMOVE
		;BLOCK TO REPEAT PLAYERMOVE IN CASE OF INVALID INPUT: C CARRYING A FLAG
		;C=01 INCASE OF INVALID CASE
		MOV A,C
		CPI 0AAH	
		JZ INVP
		CALL UPDATE2
		DCR B
		JZ DUMMYDRAW
		;DRAW BLOCK:
		;PUSH H			;;;
		CALL CFULL
		;POP H
		CPI 00H
		JZ DUMMYDRAW
		CALL AIMOVE
		CALL UPDATE2
		CALL CWIN
		CPI 01H	
		JZ DUMMYAIWIN
		CPI 0FEH
		JZ DUMMYPLAYERWIN
		;DRAW BLOCK:
		CALL CFULL
		CPI 00H
		JZ DUMMYDRAW
		DCR B
		JZ DUMMYDRAW
		JMP PLAY2	
ENDOG:		HLT
;WIN EFFECTS:
DUMMYPLAYERWIN:	PUSH H
		LXI H,STRING4
		CALL LCDSTRINGDISP
		POP H
		JMP ENDP
		
DUMMYAIWIN:	PUSH H
		LXI H,STRING6
		CALL LCDSTRINGDISP
		POP H
		JMP ENDP
		
DUMMYDRAW:	PUSH H
		LXI H,STRING7
		CALL LCDSTRINGDISP
		POP H
		PUSH H
		MVI L, 03H
AGAINDRAW:	MVI A,0AAH
		OUT 00H
		OUT 01H
		OUT 02H
		CALL DELAY100MS
		CALL DELAY100MS
		CALL DELAY100MS
		CALL DELAY100MS
		MVI A,055H
		OUT 00H
		OUT 01H
		OUT 02H
		CALL DELAY100MS
		CALL DELAY100MS
		CALL DELAY100MS
		CALL DELAY100MS
		DCR L
		JNZ AGAINDRAW
		POP H
		JMP MAINCODE

TXBOARD:	PUSH PSW
		PUSH H
		PUSH B
		PUSH D
		LXI H,COLOURFLAG
		MOV C,M
		LXI H,BOARD
		LXI D,TBOARD
		MOV A,C
		CPI 01H
		JZ INVERTBOARD
		;COPY BOARD:
		MVI B,09H
LOOPTXBOARD1:	
		MOV A,M
		XCHG
		MOV M,A
		INX H
		XCHG
		INX H
		DCR B
		JNZ LOOPTXBOARD1	
		POP D
		POP B
		POP H
		POP PSW
		RET	
		
INVERTBOARD:	MOV A,M
		XCHG
		CPI 0FEH
		JNZ STX1
		MVI M,01H
		JMP ILEND
STX1:		CPI 01H
		JNZ STX2
		MVI M,0FEH
		JMP ILEND
STX2:		MVI M,00H
ILEND:		INX H
		XCHG
		INX H
		DCR B
		JNZ INVERTBOARD
		POP D
		POP B
		POP H
		POP PSW
		RET
UPDATE2: 	PUSH PSW
		PUSH H
	    	PUSH B
	    	PUSH D
		CALL TXBOARD
		LXI H,TBOARD
		LXI D,BMAP
		MVI B, 09H; TOTAL MAP FOR THE WHOLE BOARD
BAGAIN2:	MOV A, M
		XCHG
		CPI 0FEH
		JNZ NOTFE2
		MVI A,02H; OTHERWISE MOVE IN THE BOARD 02H
NOTFE2:		MOV M, A
		INX H
		INX D
		XCHG
		DCR B
		JNZ BAGAIN2
		LXI H, BMAP
	    	;; 
	    	MOV A,M
	    	RRC
	    	RRC
		INX H
	    	MOV B,M
	    	ORA B
		RRC
		RRC
		INX H
		MOV B,M
		ORA B
		RRC 
		RRC
		INX H
		MOV B,M
		ORA B
		RRC
		RRC
		OUT 00H			
		INX H
		MOV A,M
	    	RRC
	    	RRC
		INX H
	    	MOV B,M
	    	ORA B
		RRC
		RRC
		INX H
		MOV B,M
		ORA B
		RRC 
		RRC
		INX H
		MOV B,M
		ORA B
		RRC
		RRC
		OUT 01H
		MVI A,02H
		RLC
		RLC
		INX H
		MOV A,M
		OUT 02H
		POP D
		POP B
		POP H
		POP PSW
		RET
;---DELAY FUNCTIONS-------
DELAY10MS:	PUSH B
		MVI C,09H ;INCREASES DELAY BY A FACTOR OF 1.2mS (3MHZ)
D_L1:		MVI B,0FFH
D_L2:		DCR B
		JNZ D_L2
		DCR C
		JNZ D_L1
		POP B
		RET
DELAY100MS:	PUSH B
		MVI C,0AH
D100_L1:	CALL DELAY10MS
		DCR C
		JNZ D100_L1
		POP B
		RET
DELAY30MS:	PUSH B
		MVI C,03H
D30_L1:		CALL DELAY10MS
		DCR C
		JNZ D30_L1
		POP B
		RET

DELAY1S:	PUSH B
		MVI C,0AH
D1S_L1:		CALL DELAY100MS
		DCR C
		JNZ D1S_L1
		POP B
		RET
;---------------------------
;--MISC FUNCTIONS-----------
SETSOD:		
		PUSH PSW
		MVI A,0C0H
		SIM
		POP PSW
		RET
RESETSOD:	
		PUSH PSW
		MVI A,040H
		SIM
		POP PSW
		RET
BLINKSOD:	
		CALL SETSOD
		CALL DELAY100MS
		CALL DELAY100MS
		CALL RESETSOD
		CALL DELAY100MS
		CALL DELAY100MS
		RET
BLINKSODX5: 	
		CALL BLINKSOD
	    	CALL BLINKSOD
	    	CALL BLINKSOD
	    	CALL BLINKSOD
	    	CALL BLINKSOD
	    	RET
BLINKSODX3: 	
		CALL BLINKSOD
	    	CALL BLINKSOD
	    	CALL BLINKSOD
	    	RET
;----------------------------	
;-----KEYPAD FUNCTIONS------
KEYIN:	;ACCUMULATOR RETURNS VALUE 	
		PUSH B
		MVI A,088H
		OUT 83H
		CALL DELAY10MS
		OUT 83H
		;;PULSING SEQUENCE  
KEYREP:		;;CALL BLINKSOD
		CALL DELAY100MS
		MVI A,00001110B
		OUT 82H
		IN 82H
		ANI 0F0H	;MASK
		CALL KCHECKP1
		CPI 10H
		JNZ KEYFOUND 
		MVI A,00001101B
		OUT 82H
		IN 82H
		ANI 0F0H	;MASK
		CALL KCHECKP2
		CPI 10H
		JNZ KEYFOUND 
		MVI A,00001011B
		OUT 82H
		IN 82H
		ANI 0F0H	;MASK
		CALL KCHECKP3
		CPI 10H
		JNZ KEYFOUND 
		MVI A,00000111B
		OUT 82H
		IN 82H
		ANI 0F0H	;MASK
		CALL KCHECKP4
		CPI 10H
		JNZ KEYFOUND
		JZ KEYREP 		
KEYFOUND: 	POP B
		RET

KCHECKP1: ;A HAS INPUT SEQUENCE 4 BIT
	 	CPI 11100000B
	 	JNZ KS1_1
	 	MVI A,00H
	 	RET	
KS1_1:	 	CPI 11010000B	
	 	JNZ KS1_2
	 	MVI A,01H
	 	RET
KS1_2:	 	CPI 10110000B	
	 	JNZ KS1_3
	 	MVI A,02H
	 	RET
KS1_3:		CPI 01110000B	
	 	JNZ KS1_4
	 	MVI A,0AH
	 	RET	 
KS1_4:   	MVI A,10H
	 	RET	

KCHECKP2: ;A HAS INPUT SEQUENCE 4 BIT
	 	CPI 11100000B
	 	JNZ KS2_1
	 	MVI A,03H
	 	RET	
KS2_1:	 	CPI 11010000B	
	 	JNZ KS2_2
	 	MVI A,04H
	 	RET
KS2_2:	 	CPI 10110000B	
	 	JNZ KS2_3
	 	MVI A,05H
	 	RET
KS2_3:	 	CPI 01110000B	
	 	JNZ KS2_4
		MVI A,0BH
	 	RET	 
KS2_4:   	MVI A,10H
	 	RET	

KCHECKP3: ;A HAS INPUT SEQUENCE 4 BIT
	 CPI 11100000B
	 JNZ KS3_1
	 MVI A,06H
	 RET	
KS3_1:	 CPI 11010000B	
	 JNZ KS3_2
	 MVI A,07H
	 RET
KS3_2:	 CPI 10110000B	
	 JNZ KS3_3
	 MVI A,08H
	 RET
KS3_3:	 CPI 01110000B	
	 JNZ KS3_4
	 MVI A,0CH
	 RET	 
KS3_4:   MVI A,10H
	 RET	

KCHECKP4: ;A HAS INPUT SEQUENCE 4 BIT
	 CPI 11100000B
	 JNZ KS4_1
	 MVI A,0EH
	 RET	
KS4_1:	 CPI 11010000B	
	 JNZ KS4_2
	 MVI A,09H
	 RET
KS4_2:	 CPI 10110000B	
	 JNZ KS4_3
	 MVI A,0FH
	 RET
KS4_3:	 CPI 01110000B	
	 JNZ KS4_4
	 MVI A,0DH
	 RET	 
KS4_4:   MVI A,10H
	 RET
			
CMD: 	OUT 81H
	MVI A,80H;RS=0,E=1
	OUT 80H
	CALL DELAY
	MVI A,00H;RS=0,E=0
	OUT 80H
	CALL DELAY
	RET

DATA: 	OUT 81H
	MVI A,0A0H;RS=1,E=1
	OUT 80H
	CALL DELAY
	MVI A,20H;RS=1,E=0
	OUT 80H
	CALL DELAY
	RET
	
DELAY:	MVI C,0FFH; making delay 140/3 * 10^-6 = 46.67us	
LOOP2:	DCR C
	JNZ LOOP2
	RET

DELAY2:	PUSH B
	MVI B,0FFH
AG2:	MVI C,0FFH
AG1:	DCR C
	JNZ AG1
	DCR B
	JNZ AG2
	POP B
	RET
;----------------------------LCD INIT--------------------;
LCDINIT: ; LCD INITIALISER
		PUSH PSW
		MVI A,38H; /LCD Function initialiser -> 2 lines
		CALL CMD
		MVI A,38H;- Double check(saw in previous codes)
		CALL CMD
		CALL DELAY; 47us DELAY
		MVI A,01H; /LCD clear command
		CALL CMD
		MVI A,01H; /LCD clear command
		CALL CMD
		CALL DELAY2
		MVI A,0CH; /LCD display command
		CALL CMD
		MVI A,80H; /cursor position on display at start
		CALL CMD		
		POP PSW
		RET
LCDSTRINGDISP:  PUSH H
		;H IS PRELOADED WITH STRING 
		CALL LCDINIT
PRINT:		MOV A,M
		INX H
		CPI 00H
		JZ STREND
		CALL DATA
		JMP PRINT
LCD2:		MVI A,0C0H; /cursor position on display at start
		CALL CMD		
		RET
LCDL2: 		PUSH H
		;H IS PRELOADED WITH STRING 
		CALL LCD2
PRINT2:		MOV A,M
		INX H
		CPI 00H
		JZ STREND
		CALL DATA
		JMP PRINT2
STREND:		POP H
		RET
;----------------------------------------
;FUNCTIONS:
;--------------------------------------------------------------
;AIMOVE:
AIMOVE: CALL BLINKSOD
	PUSH PSW
	PUSH B
	PUSH D
	PUSH H
	LXI H,STRING2
	CALL LCDSTRINGDISP
	CALL DELAY100MS
	LXI H,BOARD
	MVI D,0FFH
	MVI C,09H
AILOOP:	MOV A,M
	CPI 00H
	JNZ INVM
	MVI M,01H
	CALL MIN
	CPI 01H
	JZ EXITA
	;NON WINNING CASES
	CMP D
	JNC SKAI
	MOV D,A
	MOV E,C
SKAI:	MVI M,00H
INVM:	INX H
	DCR C
	JNZ AILOOP
	;CASE WHERE IT ISNT A WINNING SITUATION:
	LXI H,BOARD
	MVI D,00H
	MVI A,09H
	SUB E
	MOV E,A
	DAD D
	MVI M,01H
EXITA:	POP H
	POP D
	POP B
	POP PSW
	RET
;---------------------------------------
;MIN
MIN:	PUSH H
	PUSH B
	PUSH D
	LXI H,BOARD
	CALL CWIN
	CPI 00H
	JNZ EXITM
	CALL CFULL
	CPI 00H
	JZ EXITM
	LXI H,BOARD
	MVI D,02H
	MVI C,09H
MINL:	MOV A,M
	CPI 00H
	JNZ MININV
	MVI M,0FEH	;PLACING 'O'
	CALL MAX
	CPI 0FEH
	JZ XITFE
	CMP D
	JNC MINSKP
	MOV D,A
MINSKP:	MVI M,00H	;REMOVING 'O'
MININV:	INX H
	DCR C
	JNZ MINL
	MOV A,D
	JMP EXITM
XITFE:	MVI M,00H	;REMOVING 'O'
EXITM:	POP D
	POP B
	POP H
	RET
;---------------------------------------
;MAX
;PLAY AS X(01H)
MAX:	PUSH H
	PUSH B
	PUSH D
	LXI H,BOARD
	CALL CWIN
	CPI 00H
	JNZ EXITMX
	CALL CFULL
	CPI 00H
	JZ EXITMX
	LXI H,BOARD
	MVI D,0FFH
	MVI C,09H
MAXL:	MOV A,M
	CPI 00H
	JNZ MAXINV
	MVI M,01H	;PLACING 'X'
	CALL MIN
	CPI 01H
	JZ XIT01
	CMP D
	JNC MAXSKP
	MOV D,A
MAXSKP:	MVI M,00H	;REMOVING 'X'
MAXINV:	INX H
	DCR C
	JNZ MAXL
	;NON 01 CASES:
	MOV A,D
	JMP EXITMX
XIT01:	MVI M,00H	;REMOVING 'X'
EXITMX:	POP D
	POP B
	POP H
	RET
;---------------------------------------
;FUNCTION TO CHECK IF THE BOARD IS FULL
CFULL:	PUSH H
	LXI H,BOARD
	MVI C,09H
EX2:	MOV A,M
	CPI 00H
	JZ EX1
	INX H
	DCR C
	JNZ EX2
	POP H
	MVI A,00H
	RET
EX1:	POP H
	MVI A,01H
	RET
;---------------------------------------
;MODIFIED CWIN: FE RETURN AND KEEPING D INTACT
CWIN:	PUSH D
	LXI D, WINLIST
	PUSH H
	LXI H,BOARD
	LXI B, 0A000H; POINTER
	MVI A,08H
	DCX D
	PUSH B
CLOOP: PUSH PSW
	XRA A
	INX D
	PUSH H
	MVI B,00H
	XCHG
	MOV C,M
	XCHG
	DAD B
	ADD M
	XCHG
	INX H
	MOV C,M
	XCHG
	DAD B
	ADD M
	XCHG
	INX H
	MOV C,M
	XCHG
	DAD B
	ADD M
	POP H ;RESTORING HL
	CPI 0FAH
	JZ WINO
	CPI 03H
	JZ WINX
	POP PSW ;RESTORING A	
	DCR A
	POP B
	STAX B
	PUSH B
	JNZ CLOOP
	POP B	
	POP H
	POP D
	MVI A,00H
	RET
WINO:
	POP PSW ;BALANCING THE STACK
	POP B
	POP H 
	POP D
	MVI A,0FEH
	RET
WINX:
	POP PSW ;BALANCING THE STACK
	POP B
	POP H
	POP D
	MVI A,01H
	RET
;---------------------------------------
;CONVERSION TABLE:
WINLIST:	.DB 00H,01H,01H
	.DB 03H,01H,01H
	.DB 06H,01H,01H
	.DB 00H,03H,03H
	.DB 01H,03H,03H
	.DB 02H,03H,03H
	.DB 00H,04H,04H
	.DB 02H,02H,02H
;BOARD STATE:
BOARD:	.EQU 8200H
	.DB 0FEH,00H,0FEH
	.DB 0FEH,001H,001H
	.DB 00H,0FEH,001H
BMAP:	.EQU 8100H
	.DB 00H,00H,00H
	.DB 00H,00H,00H
	.DB 00H,00H,00H
TBOARD: .EQU 8400H
COLOURFLAG .EQU 8300H
WINPOS:	.EQU 8310H
MCOUNTER .EQU 8305H
;----------------------------------------
INIT_RAM:	PUSH B
		PUSH H
		MVI B,09H
		LXI H,BMAP
RCLRL:		MVI M,00H
		INX H
		DCR B
		JNZ RCLRL	
		MVI B,09H
		LXI H,BOARD
BCLRL:		MVI M,00H
		INX H
		DCR B
		JNZ BCLRL
		MVI B,09H
		LXI H,TBOARD
TBCLRL:		MVI M,00H
		INX H
		DCR B
		JNZ TBCLRL
		LXI H,WINPOS
		MVI M,00H
		INX H
		MVI M,00H
		INX H
		MVI M,00H
		POP H
		POP B
		RET	
;-----------------------------------------	
;----------------------------------------
PLAYERMOVE:
	PUSH PSW
	LXI H,BOARD
	MVI C,00H
	CALL KEYIN ;0-8 VALUE MAPPED
	;REJECTING OTHER KEYPAD INPUTS:
	CPI 09H
	JNC INVALID
	CALL CHECKCORRECT
	CPI 0AAH
	JZ INVALID
	ADD L
	MOV L, A
	MVI M,0FEH ;X=01H ASSUMED
	PUSH B
	LXI H,BOARD
	CALL CWIN
	POP B
	POP PSW
	RET
INVALID: MVI C,0AAH
	 POP PSW
	 RET
CHECKCORRECT:	PUSH H 
		PUSH B
		LXI H, BOARD
		MOV B, A
		MOV A, L
		ADD B
		MOV L, A
		MOV A, M
		CPI 00H
		JZ OK
		MVI A,0AAH
		POP B
		POP H
		RET
OK:		MOV A,B
		POP B
		POP H
		RET 
	;-------------------------------------
PLAYERMOVE2:
	PUSH PSW
	LXI H,BOARD
	MVI C,00H
	CALL KEYIN ;0-8 VALUE MAPPED
	;REJECTING OTHER KEYPAD INPUTS:
	CPI 09H
	JNC INVALID1
	CALL CHECKCORRECT1
	CPI 0AAH
	JZ INVALID1
	ADD L
	MOV L, A
	MVI M,01H ;P2=01H ASSUMED
	PUSH B
	LXI H,BOARD
	CALL CWIN
	POP B
	POP PSW
	RET
INVALID1: MVI C,0AAH
	 POP PSW
	 RET
CHECKCORRECT1:	PUSH H 
		PUSH B
		LXI H, BOARD
		MOV B, A
		MOV A, L
		ADD B
		MOV L, A
		MOV A, M
		CPI 00H
		JZ OK1
		MVI A,0AAH
		POP B
		POP H
		RET
OK1:		MOV A,B
		POP B
		POP H
		RET
;-------------------------------------
PLAYERGAME:		LXI H,STRING12
				CALL LCDSTRINGDISP
				LXI H,STRING10	; Play as green / red displayed @ this point
				CALL LCDL2
				;LXI H,BOARD   ;CWIN LOADS BOARD AUTOMATICALLY /H-L MODIFIED NO STACKING FOR H/
				CALL UPDATE2
XCOLOURMENULOOP:		LXI H,COLOURFLAG
				CALL KEYIN
				;COLOURFLAG 00H -> NORMAL @A
				;COLOURFLAG 01H -> INVERT GRID @B
				CPI 0AH
				JNZ XCSKIP1		
				MVI M,00H
				JMP XCSKIP2
XCSKIP1:			CPI 0BH
				JNZ XCOLOURMENULOOP
				MVI M,01H		
XCSKIP2:			CALL UPDATE2
				CALL CWIN
				CPI 01H	
				JZ ENDP
				CPI 0FEH
				JZ ENDP
INVP1:				LXI H,STRING13
				CALL LCDSTRINGDISP
				CALL PLAYERMOVE
				;BLOCK TO REPEAT PLAYERMOVE IN CASE OF INVALID INPUT: C CARRYING A FLAG
				;C=01 INCASE OF INVALID CASE
				MOV A,C
				CPI 0AAH	
				JZ INVP1
				CALL UPDATE2
				CALL CWIN
				CPI 01H
				JZ ENDP
				CPI 0FEH
				JZ ENDP
				CALL CFULL
				CPI 00H
				JZ DUMMYDRAW
INVP2:				LXI H,STRING15
				CALL LCDSTRINGDISP
				CALL PLAYERMOVE2
				MOV A,C
				CPI 0AAH	
				JZ INVP2
				CALL UPDATE2
				CALL CWIN
				CPI 01H
				JZ ENDP
				CPI 0FEH
				JZ ENDP
				CALL CFULL
				CPI 00H
				JZ DUMMYDRAW
				JMP XCSKIP2				


ENDP:		LXI H, 0A000H
		LXI D, WINLIST
		MVI A, 08H
		SUB M
		LXI H, BOARD
		ADD E
		MOV E,A
		MVI A, 03H
		MVI C, 00H; THIS IS THE COLOUR FLAG
WRAPPER:	PUSH PSW
		PUSH H
		PUSH D
		MVI B,03H
BLINKONE:	XCHG
		MOV A, M
		XCHG
		ADD L
		MOV L,A
		MOV A,C
		CPI 00H
		JNZ COL2
		MVI M, 01H
		JMP AHEAD
COL2:		MVI M, 0FEH
AHEAD:		INX D
		DCR B
		CALL UPDATE2
		JNZ BLINKONE
		POP D
		POP H
		MOV A,C
		CMA
		MOV C,A
		POP PSW
		DCR A
		JNZ WRAPPER
		JMP MAINCODE

;-------------------------------------
;List of strings used:
STRING5:	.DB "Play First?",00H 
STRING8:	.DB "A)Yes B)No",00H
STRING9:	.DB "Play as:",00H
STRING10:	.DB "A)Green  B)Red",00H
STRING1:	.DB "Tic-Tac-Toe",00H
STRING2:	.DB "AI MOVE",00H
STRING3:	.DB "Player Move",00H
STRING4:	.DB "Player Wins!",00H
STRING6:	.DB "AI Wins!",00H
STRING7:	.DB "It's a Draw!",00H
STRING11: 	.DB "Play Vs. AI?",00H
STRING12:	.DB "Player1 is:",00H
STRING13:	.DB "Player1's Turn:",00H
STRING14:	.DB "Player1 Wins!",00H
STRING15:	.DB "Player2's Turn:",00H
STRING16:	.DB "Player2 Wins!",00H
STRING17:	.DB "MICROPROCESSOR",00H
STRING18:	.DB "PROJECT BY:",00H
STRING19:	.DB "155/EC/15",00H
STRING20:	.DB "196/EC/15",00H
ERRORMSG:	.DB "ERROR!",00H
;---------------------------------------
